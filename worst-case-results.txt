# JMH version: 1.37
# VM version: JDK 22.0.2, OpenJDK 64-Bit Server VM, 22.0.2+9-70
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.2/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 2 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.kv.jmh.util.metrics.RunWithListTest.trace

# Run progress: 0.00% complete, ETA 00:00:54
# Fork: 1 of 3
# Warmup Iteration   1: 5.850 ops/ms
# Warmup Iteration   2: 6.133 ops/ms
Iteration   1: 6.646 ops/ms
Iteration   2: 6.921 ops/ms
Iteration   3: 6.946 ops/ms

# Run progress: 11.11% complete, ETA 00:00:53
# Fork: 2 of 3
# Warmup Iteration   1: 6.299 ops/ms
# Warmup Iteration   2: 6.330 ops/ms
Iteration   1: 6.681 ops/ms
Iteration   2: 6.801 ops/ms
Iteration   3: 6.746 ops/ms

# Run progress: 22.22% complete, ETA 00:00:45
# Fork: 3 of 3
# Warmup Iteration   1: 6.348 ops/ms
# Warmup Iteration   2: 6.184 ops/ms
Iteration   1: 6.294 ops/ms
Iteration   2: 6.291 ops/ms
Iteration   3: 6.462 ops/ms


Result "com.kv.jmh.util.metrics.RunWithListTest.trace":
  6.643 ±(99.9%) 0.414 ops/ms [Average]
  (min, avg, max) = (6.291, 6.643, 6.946), stdev = 0.246
  CI (99.9%): [6.229, 7.057] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 22.0.2, OpenJDK 64-Bit Server VM, 22.0.2+9-70
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.2/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 2 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.kv.jmh.util.metrics.RunWithListTest.trace

# Run progress: 33.32% complete, ETA 00:00:39
# Fork: 1 of 3
# Warmup Iteration   1: 0.168 ms/op
# Warmup Iteration   2: 0.156 ms/op
Iteration   1: 0.148 ms/op
Iteration   2: 0.151 ms/op
Iteration   3: 0.152 ms/op

# Run progress: 44.43% complete, ETA 00:00:32
# Fork: 2 of 3
# Warmup Iteration   1: 0.155 ms/op
# Warmup Iteration   2: 0.154 ms/op
Iteration   1: 0.156 ms/op
Iteration   2: 0.155 ms/op
Iteration   3: 0.152 ms/op

# Run progress: 55.54% complete, ETA 00:00:25
# Fork: 3 of 3
# Warmup Iteration   1: 0.158 ms/op
# Warmup Iteration   2: 0.153 ms/op
Iteration   1: 0.154 ms/op
Iteration   2: 0.153 ms/op
Iteration   3: 0.147 ms/op


Result "com.kv.jmh.util.metrics.RunWithListTest.trace":
  0.152 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.147, 0.152, 0.156), stdev = 0.003
  CI (99.9%): [0.147, 0.157] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 22.0.2, OpenJDK 64-Bit Server VM, 22.0.2+9-70
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.2/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 2 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kv.jmh.util.metrics.RunWithListTest.trace

# Run progress: 66.65% complete, ETA 00:00:19
# Fork: 1 of 3
# Warmup Iteration   1: 0.155 ±(99.9%) 0.005 ms/op
# Warmup Iteration   2: 0.161 ±(99.9%) 0.003 ms/op
Iteration   1: 0.179 ±(99.9%) 0.038 ms/op
                 p0.00:   0.056 ms/op
                 p0.50:   0.164 ms/op
                 p0.90:   0.301 ms/op
                 p0.95:   0.348 ms/op
                 p0.99:   0.479 ms/op
                 p0.999:  0.479 ms/op
                 p0.9999: 0.479 ms/op
                 p1.00:   0.479 ms/op

Iteration   2: 0.170 ±(99.9%) 0.039 ms/op
                 p0.00:   0.076 ms/op
                 p0.50:   0.126 ms/op
                 p0.90:   0.269 ms/op
                 p0.95:   0.359 ms/op
                 p0.99:   0.553 ms/op
                 p0.999:  0.553 ms/op
                 p0.9999: 0.553 ms/op
                 p1.00:   0.553 ms/op

Iteration   3: 0.163 ±(99.9%) 0.031 ms/op
                 p0.00:   0.077 ms/op
                 p0.50:   0.136 ms/op
                 p0.90:   0.288 ms/op
                 p0.95:   0.321 ms/op
                 p0.99:   0.420 ms/op
                 p0.999:  0.420 ms/op
                 p0.9999: 0.420 ms/op
                 p1.00:   0.420 ms/op


# Run progress: 77.76% complete, ETA 00:00:12
# Fork: 2 of 3
# Warmup Iteration   1: 0.157 ±(99.9%) 0.006 ms/op
# Warmup Iteration   2: 0.156 ±(99.9%) 0.002 ms/op
Iteration   1: 0.165 ±(99.9%) 0.027 ms/op
                 p0.00:   0.060 ms/op
                 p0.50:   0.154 ms/op
                 p0.90:   0.260 ms/op
                 p0.95:   0.282 ms/op
                 p0.99:   0.346 ms/op
                 p0.999:  0.346 ms/op
                 p0.9999: 0.346 ms/op
                 p1.00:   0.346 ms/op

Iteration   2: 0.152 ±(99.9%) 0.032 ms/op
                 p0.00:   0.060 ms/op
                 p0.50:   0.115 ms/op
                 p0.90:   0.256 ms/op
                 p0.95:   0.311 ms/op
                 p0.99:   0.483 ms/op
                 p0.999:  0.483 ms/op
                 p0.9999: 0.483 ms/op
                 p1.00:   0.483 ms/op

Iteration   3: 0.157 ±(99.9%) 0.031 ms/op
                 p0.00:   0.065 ms/op
                 p0.50:   0.131 ms/op
                 p0.90:   0.272 ms/op
                 p0.95:   0.316 ms/op
                 p0.99:   0.474 ms/op
                 p0.999:  0.474 ms/op
                 p0.9999: 0.474 ms/op
                 p1.00:   0.474 ms/op


# Run progress: 88.86% complete, ETA 00:00:06
# Fork: 3 of 3
# Warmup Iteration   1: 0.163 ±(99.9%) 0.005 ms/op
# Warmup Iteration   2: 0.157 ±(99.9%) 0.003 ms/op
Iteration   1: 0.156 ±(99.9%) 0.036 ms/op
                 p0.00:   0.072 ms/op
                 p0.50:   0.121 ms/op
                 p0.90:   0.294 ms/op
                 p0.95:   0.342 ms/op
                 p0.99:   0.423 ms/op
                 p0.999:  0.423 ms/op
                 p0.9999: 0.423 ms/op
                 p1.00:   0.423 ms/op

Iteration   2: 0.159 ±(99.9%) 0.030 ms/op
                 p0.00:   0.066 ms/op
                 p0.50:   0.143 ms/op
                 p0.90:   0.257 ms/op
                 p0.95:   0.299 ms/op
                 p0.99:   0.419 ms/op
                 p0.999:  0.419 ms/op
                 p0.9999: 0.419 ms/op
                 p1.00:   0.419 ms/op

Iteration   3: 0.156 ±(99.9%) 0.033 ms/op
                 p0.00:   0.064 ms/op
                 p0.50:   0.125 ms/op
                 p0.90:   0.293 ms/op
                 p0.95:   0.341 ms/op
                 p0.99:   0.406 ms/op
                 p0.999:  0.406 ms/op
                 p0.9999: 0.406 ms/op
                 p1.00:   0.406 ms/op



Result "com.kv.jmh.util.metrics.RunWithListTest.trace":
  N = 633
  mean =      0.162 ±(99.9%) 0.011 ms/op

  Histogram, ms/op:
    [0.000, 0.050) = 0 
    [0.050, 0.100) = 166 
    [0.100, 0.150) = 187 
    [0.150, 0.200) = 111 
    [0.200, 0.250) = 78 
    [0.250, 0.300) = 54 
    [0.300, 0.350) = 18 
    [0.350, 0.400) = 9 
    [0.400, 0.450) = 5 
    [0.450, 0.500) = 4 
    [0.500, 0.550) = 0 
    [0.550, 0.600) = 1 

  Percentiles, ms/op:
      p(0.0000) =      0.056 ms/op
     p(50.0000) =      0.135 ms/op
     p(90.0000) =      0.272 ms/op
     p(95.0000) =      0.314 ms/op
     p(99.0000) =      0.425 ms/op
     p(99.9000) =      0.553 ms/op
     p(99.9900) =      0.553 ms/op
     p(99.9990) =      0.553 ms/op
     p(99.9999) =      0.553 ms/op
    p(100.0000) =      0.553 ms/op


# JMH version: 1.37
# VM version: JDK 22.0.2, OpenJDK 64-Bit Server VM, 22.0.2+9-70
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.2/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 2 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.kv.jmh.util.metrics.RunWithListTest.trace

# Run progress: 99.97% complete, ETA 00:00:00
# Fork: 1 of 3
# Warmup Iteration   1: 1.388 ms/op
# Warmup Iteration   2: 0.176 ms/op
Iteration   1: 0.119 ms/op
Iteration   2: 0.107 ms/op
Iteration   3: 0.098 ms/op

# Run progress: 99.98% complete, ETA 00:00:00
# Fork: 2 of 3
# Warmup Iteration   1: 1.176 ms/op
# Warmup Iteration   2: 0.151 ms/op
Iteration   1: 0.099 ms/op
Iteration   2: 0.141 ms/op
Iteration   3: 0.151 ms/op

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 3 of 3
# Warmup Iteration   1: 1.071 ms/op
# Warmup Iteration   2: 0.143 ms/op
Iteration   1: 0.161 ms/op
Iteration   2: 0.107 ms/op
Iteration   3: 0.107 ms/op


Result "com.kv.jmh.util.metrics.RunWithListTest.trace":
  N = 9
  mean =      0.121 ±(99.9%) 0.040 ms/op

  Histogram, ms/op:
    [0.090, 0.095) = 0 
    [0.095, 0.100) = 2 
    [0.100, 0.105) = 0 
    [0.105, 0.110) = 3 
    [0.110, 0.115) = 0 
    [0.115, 0.120) = 1 
    [0.120, 0.125) = 0 
    [0.125, 0.130) = 0 
    [0.130, 0.135) = 0 
    [0.135, 0.140) = 0 
    [0.140, 0.145) = 1 
    [0.145, 0.150) = 0 
    [0.150, 0.155) = 1 
    [0.155, 0.160) = 0 
    [0.160, 0.165) = 1 
    [0.165, 0.170) = 0 

  Percentiles, ms/op:
      p(0.0000) =      0.098 ms/op
     p(50.0000) =      0.107 ms/op
     p(90.0000) =      0.161 ms/op
     p(95.0000) =      0.161 ms/op
     p(99.0000) =      0.161 ms/op
     p(99.9000) =      0.161 ms/op
     p(99.9900) =      0.161 ms/op
     p(99.9990) =      0.161 ms/op
     p(99.9999) =      0.161 ms/op
    p(100.0000) =      0.161 ms/op


# Run complete. Total time: 00:00:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                      Mode  Cnt  Score   Error   Units
WorstCaseTest.trace           thrpt    9  6.643 ± 0.414  ops/ms
WorstCaseTest.trace            avgt    9  0.152 ± 0.005   ms/op
WorstCaseTest.trace          sample  633  0.162 ± 0.011   ms/op
WorstCaseTest.trace:p0.00    sample       0.056           ms/op
WorstCaseTest.trace:p0.50    sample       0.135           ms/op
WorstCaseTest.trace:p0.90    sample       0.272           ms/op
WorstCaseTest.trace:p0.95    sample       0.314           ms/op
WorstCaseTest.trace:p0.99    sample       0.425           ms/op
WorstCaseTest.trace:p0.999   sample       0.553           ms/op
WorstCaseTest.trace:p0.9999  sample       0.553           ms/op
WorstCaseTest.trace:p1.00    sample       0.553           ms/op
WorstCaseTest.trace              ss    9  0.121 ± 0.040   ms/op
