# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest

# Run progress: 0.00% complete, ETA 00:00:54
# Fork: 1 of 3
# Warmup Iteration   1: 0.035 ops/ms
# Warmup Iteration   2: 0.040 ops/ms
Iteration   1: 0.048 ops/ms
                 gc.alloc.rate:      7.932 MB/sec
                 gc.alloc.rate.norm: 174392.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 0.050 ops/ms
                 gc.alloc.rate:      8.180 MB/sec
                 gc.alloc.rate.norm: 174376.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 0.045 ops/ms
                 gc.alloc.rate:      0.557 MB/sec
                 gc.alloc.rate.norm: 1250448.000 B/op
                 gc.count:           ≈ 0 counts


# Run progress: 11.11% complete, ETA 00:01:26
# Fork: 2 of 3
# Warmup Iteration   1: 0.041 ops/ms
# Warmup Iteration   2: 0.047 ops/ms
Iteration   1: 0.041 ops/ms
                 gc.alloc.rate:      6.783 MB/sec
                 gc.alloc.rate.norm: 174440.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 0.045 ops/ms
                 gc.alloc.rate:      7.527 MB/sec
                 gc.alloc.rate.norm: 174440.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 0.062 ops/ms
                 gc.alloc.rate:      0.554 MB/sec
                 gc.alloc.rate.norm: 1229384.000 B/op
                 gc.count:           ≈ 0 counts


# Run progress: 22.22% complete, ETA 00:01:15
# Fork: 3 of 3
# Warmup Iteration   1: 0.042 ops/ms
# Warmup Iteration   2: 0.052 ops/ms
Iteration   1: 0.059 ops/ms
                 gc.alloc.rate:      9.899 MB/sec
                 gc.alloc.rate.norm: 175904.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 0.025 ops/ms
                 gc.alloc.rate:      4.114 MB/sec
                 gc.alloc.rate.norm: 174424.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 0.061 ops/ms
                 gc.alloc.rate:      0.554 MB/sec
                 gc.alloc.rate.norm: 1232720.000 B/op
                 gc.count:           1.000 counts
                 gc.time:            6.000 ms



Result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest":
  0.048 ±(99.9%) 0.020 ops/ms [Average]
  (min, avg, max) = (0.025, 0.048, 0.062), stdev = 0.012
  CI (99.9%): [0.029, 0.068] (assumes normal distribution)

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate":
  5.122 ±(99.9%) 6.293 MB/sec [Average]
  (min, avg, max) = (0.554, 5.122, 9.899), stdev = 3.745
  CI (99.9%): [≈ 0, 11.415] (assumes normal distribution)

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate.norm":
  528947.556 ±(99.9%) 893080.199 B/op [Average]
  (min, avg, max) = (174376.000, 528947.556, 1250448.000), stdev = 531457.701
  CI (99.9%): [≈ 0, 1422027.754] (assumes normal distribution)

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.111, 1.000), stdev = 0.333
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.time":
  6.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.667, 6.000), stdev = 2.000
  CI (99.9%): [6.000, 6.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest

# Run progress: 33.32% complete, ETA 00:01:05
# Fork: 1 of 3
# Warmup Iteration   1: 28.234 ms/op
# Warmup Iteration   2: 23.694 ms/op
Iteration   1: 21.105 ms/op
                 gc.alloc.rate:      7.832 MB/sec
                 gc.alloc.rate.norm: 174408.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 25.072 ms/op
                 gc.alloc.rate:      6.597 MB/sec
                 gc.alloc.rate.norm: 174376.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 20.088 ms/op
                 gc.alloc.rate:      0.550 MB/sec
                 gc.alloc.rate.norm: 1228440.000 B/op
                 gc.count:           ≈ 0 counts


# Run progress: 44.43% complete, ETA 00:00:54
# Fork: 2 of 3
# Warmup Iteration   1: 27.813 ms/op
# Warmup Iteration   2: 23.672 ms/op
Iteration   1: 20.514 ms/op
                 gc.alloc.rate:      8.038 MB/sec
                 gc.alloc.rate.norm: 174384.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 21.070 ms/op
                 gc.alloc.rate:      7.921 MB/sec
                 gc.alloc.rate.norm: 176272.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 26.870 ms/op
                 gc.alloc.rate:      0.545 MB/sec
                 gc.alloc.rate.norm: 1226832.000 B/op
                 gc.count:           ≈ 0 counts


# Run progress: 55.54% complete, ETA 00:00:43
# Fork: 3 of 3
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: io.netty.handler.ssl.SslHandshakeTimeoutException: handshake timed out after 10000ms
	at com.kv.jmh.service.InfoService.getGadgetInfo(InfoService.java:44)
	at com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest(InfoServiceBenchmarkTest.java:27)
	at com.kv.jmh.service.jmh_generated.InfoServiceBenchmarkTest_getGadgetInfoTest_jmhTest.getGadgetInfoTest_avgt_jmhStub(InfoServiceBenchmarkTest_getGadgetInfoTest_jmhTest.java:243)
	at com.kv.jmh.service.jmh_generated.InfoServiceBenchmarkTest_getGadgetInfoTest_jmhTest.getGadgetInfoTest_AverageTime(InfoServiceBenchmarkTest_getGadgetInfoTest_jmhTest.java:181)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:527)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:504)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1570)
Caused by: io.netty.handler.ssl.SslHandshakeTimeoutException: handshake timed out after 10000ms
	at io.netty.handler.ssl.SslHandler$8.run(SslHandler.java:2277)
	at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
	at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:156)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	... 1 more


<JMH had finished, but forked VM did not exit, are there stray running threads? Waiting 24 seconds more...>

Non-finished threads:

Thread[#38,container-0,5,main]
  at java.base@22.0.1/java.lang.Thread.sleepNanos0(Native Method)
  at java.base@22.0.1/java.lang.Thread.sleepNanos(Thread.java:491)
  at java.base@22.0.1/java.lang.Thread.sleep(Thread.java:522)
  at app//org.apache.catalina.core.StandardServer.await(StandardServer.java:520)
  at app//org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1.run(TomcatWebServer.java:219)

Thread[#37,Catalina-utility-2,1,main]
  at java.base@22.0.1/jdk.internal.misc.Unsafe.park(Native Method)
  at java.base@22.0.1/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
  at app//org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
  at java.base@22.0.1/java.lang.Thread.runWith(Thread.java:1583)
  at java.base@22.0.1/java.lang.Thread.run(Thread.java:1570)

Thread[#36,Catalina-utility-1,1,main]
  at java.base@22.0.1/jdk.internal.misc.Unsafe.park(Native Method)
  at java.base@22.0.1/java.util.concurrent.locks.LockSupport.park(LockSupport.java:371)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:519)
  at java.base@22.0.1/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:4013)
  at java.base@22.0.1/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3961)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1707)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1177)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
  at app//org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
  at java.base@22.0.1/java.lang.Thread.runWith(Thread.java:1583)
  at java.base@22.0.1/java.lang.Thread.run(Thread.java:1570)

Thread[#61,DestroyJavaVM,5,main]


<JMH had finished, but forked VM did not exit, are there stray running threads? Waiting 19 seconds more...>

Non-finished threads:

Thread[#38,container-0,5,main]
  at java.base@22.0.1/java.lang.Thread.sleepNanos0(Native Method)
  at java.base@22.0.1/java.lang.Thread.sleepNanos(Thread.java:491)
  at java.base@22.0.1/java.lang.Thread.sleep(Thread.java:522)
  at app//org.apache.catalina.core.StandardServer.await(StandardServer.java:520)
  at app//org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1.run(TomcatWebServer.java:219)

Thread[#37,Catalina-utility-2,1,main]
  at java.base@22.0.1/jdk.internal.misc.Unsafe.park(Native Method)
  at java.base@22.0.1/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
  at app//org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
  at java.base@22.0.1/java.lang.Thread.runWith(Thread.java:1583)
  at java.base@22.0.1/java.lang.Thread.run(Thread.java:1570)

Thread[#36,Catalina-utility-1,1,main]
  at java.base@22.0.1/jdk.internal.misc.Unsafe.park(Native Method)
  at java.base@22.0.1/java.util.concurrent.locks.LockSupport.park(LockSupport.java:371)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:519)
  at java.base@22.0.1/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:4013)
  at java.base@22.0.1/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3961)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1707)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1177)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
  at app//org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
  at java.base@22.0.1/java.lang.Thread.runWith(Thread.java:1583)
  at java.base@22.0.1/java.lang.Thread.run(Thread.java:1570)

Thread[#61,DestroyJavaVM,5,main]


<JMH had finished, but forked VM did not exit, are there stray running threads? Waiting 14 seconds more...>

Non-finished threads:

Thread[#38,container-0,5,main]
  at java.base@22.0.1/java.lang.Thread.sleepNanos0(Native Method)
  at java.base@22.0.1/java.lang.Thread.sleepNanos(Thread.java:491)
  at java.base@22.0.1/java.lang.Thread.sleep(Thread.java:522)
  at app//org.apache.catalina.core.StandardServer.await(StandardServer.java:520)
  at app//org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1.run(TomcatWebServer.java:219)

Thread[#37,Catalina-utility-2,1,main]
  at java.base@22.0.1/jdk.internal.misc.Unsafe.park(Native Method)
  at java.base@22.0.1/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
  at app//org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
  at java.base@22.0.1/java.lang.Thread.runWith(Thread.java:1583)
  at java.base@22.0.1/java.lang.Thread.run(Thread.java:1570)

Thread[#36,Catalina-utility-1,1,main]
  at java.base@22.0.1/jdk.internal.misc.Unsafe.park(Native Method)
  at java.base@22.0.1/java.util.concurrent.locks.LockSupport.park(LockSupport.java:371)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:519)
  at java.base@22.0.1/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:4013)
  at java.base@22.0.1/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3961)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1707)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1177)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
  at app//org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
  at java.base@22.0.1/java.lang.Thread.runWith(Thread.java:1583)
  at java.base@22.0.1/java.lang.Thread.run(Thread.java:1570)

Thread[#61,DestroyJavaVM,5,main]


<JMH had finished, but forked VM did not exit, are there stray running threads? Waiting 9 seconds more...>

Non-finished threads:

Thread[#38,container-0,5,main]
  at java.base@22.0.1/java.lang.Thread.sleepNanos0(Native Method)
  at java.base@22.0.1/java.lang.Thread.sleepNanos(Thread.java:491)
  at java.base@22.0.1/java.lang.Thread.sleep(Thread.java:522)
  at app//org.apache.catalina.core.StandardServer.await(StandardServer.java:520)
  at app//org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1.run(TomcatWebServer.java:219)

Thread[#37,Catalina-utility-2,1,main]
  at java.base@22.0.1/jdk.internal.misc.Unsafe.park(Native Method)
  at java.base@22.0.1/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
  at app//org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
  at java.base@22.0.1/java.lang.Thread.runWith(Thread.java:1583)
  at java.base@22.0.1/java.lang.Thread.run(Thread.java:1570)

Thread[#36,Catalina-utility-1,1,main]
  at java.base@22.0.1/jdk.internal.misc.Unsafe.park(Native Method)
  at java.base@22.0.1/java.util.concurrent.locks.LockSupport.park(LockSupport.java:371)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:519)
  at java.base@22.0.1/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:4013)
  at java.base@22.0.1/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3961)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1707)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1177)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
  at app//org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
  at java.base@22.0.1/java.lang.Thread.runWith(Thread.java:1583)
  at java.base@22.0.1/java.lang.Thread.run(Thread.java:1570)

Thread[#61,DestroyJavaVM,5,main]


<JMH had finished, but forked VM did not exit, are there stray running threads? Waiting 4 seconds more...>

Non-finished threads:

Thread[#38,container-0,5,main]
  at java.base@22.0.1/java.lang.Thread.sleepNanos0(Native Method)
  at java.base@22.0.1/java.lang.Thread.sleepNanos(Thread.java:491)
  at java.base@22.0.1/java.lang.Thread.sleep(Thread.java:522)
  at app//org.apache.catalina.core.StandardServer.await(StandardServer.java:520)
  at app//org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1.run(TomcatWebServer.java:219)

Thread[#37,Catalina-utility-2,1,main]
  at java.base@22.0.1/jdk.internal.misc.Unsafe.park(Native Method)
  at java.base@22.0.1/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
  at app//org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
  at java.base@22.0.1/java.lang.Thread.runWith(Thread.java:1583)
  at java.base@22.0.1/java.lang.Thread.run(Thread.java:1570)

Thread[#36,Catalina-utility-1,1,main]
  at java.base@22.0.1/jdk.internal.misc.Unsafe.park(Native Method)
  at java.base@22.0.1/java.util.concurrent.locks.LockSupport.park(LockSupport.java:371)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:519)
  at java.base@22.0.1/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:4013)
  at java.base@22.0.1/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3961)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1707)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1177)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
  at app//org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
  at java.base@22.0.1/java.lang.Thread.runWith(Thread.java:1583)
  at java.base@22.0.1/java.lang.Thread.run(Thread.java:1570)

Thread[#61,DestroyJavaVM,5,main]


<JMH had finished, but forked VM did not exit, are there stray running threads? Waiting 0 seconds more...>

Non-finished threads:

Thread[#38,container-0,5,main]
  at java.base@22.0.1/java.lang.Thread.sleepNanos0(Native Method)
  at java.base@22.0.1/java.lang.Thread.sleepNanos(Thread.java:491)
  at java.base@22.0.1/java.lang.Thread.sleep(Thread.java:522)
  at app//org.apache.catalina.core.StandardServer.await(StandardServer.java:520)
  at app//org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1.run(TomcatWebServer.java:219)

Thread[#37,Catalina-utility-2,1,main]
  at java.base@22.0.1/jdk.internal.misc.Unsafe.park(Native Method)
  at java.base@22.0.1/java.util.concurrent.locks.LockSupport.park(LockSupport.java:371)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:519)
  at java.base@22.0.1/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:4013)
  at java.base@22.0.1/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3961)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1707)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1177)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
  at app//org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
  at java.base@22.0.1/java.lang.Thread.runWith(Thread.java:1583)
  at java.base@22.0.1/java.lang.Thread.run(Thread.java:1570)

Thread[#36,Catalina-utility-1,1,main]
  at java.base@22.0.1/jdk.internal.misc.Unsafe.park(Native Method)
  at java.base@22.0.1/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:269)
  at java.base@22.0.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1758)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
  at java.base@22.0.1/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1070)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  at java.base@22.0.1/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
  at app//org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
  at java.base@22.0.1/java.lang.Thread.runWith(Thread.java:1583)
  at java.base@22.0.1/java.lang.Thread.run(Thread.java:1570)

Thread[#61,DestroyJavaVM,5,main]


<shutdown timeout of 30 seconds expired, forcing forked VM to exit>


Result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest":
  22.453 ±(99.9%) 7.877 ms/op [Average]
  (min, avg, max) = (20.088, 22.453, 26.870), stdev = 2.809
  CI (99.9%): [14.577, 30.330] (assumes normal distribution)

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate":
  5.247 ±(99.9%) 10.312 MB/sec [Average]
  (min, avg, max) = (0.545, 5.247, 8.038), stdev = 3.677
  CI (99.9%): [≈ 0, 15.559] (assumes normal distribution)

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate.norm":
  525785.333 ±(99.9%) 1524501.486 B/op [Average]
  (min, avg, max) = (174376.000, 525785.333, 1228440.000), stdev = 543651.916
  CI (99.9%): [≈ 0, 2050286.819] (assumes normal distribution)

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.count":
  ≈ 0 counts


# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest

# Run progress: 66.65% complete, ETA 00:00:48
# Fork: 1 of 3
# Warmup Iteration   1: 26.758 ±(99.9%) 12.162 ms/op
# Warmup Iteration   2: 22.090 ±(99.9%) 1.429 ms/op
Iteration   1: 16.286 ms/op
                 gc.alloc.rate:      11.647 MB/sec
                 gc.alloc.rate.norm: 203488.000 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              16.286 ms/op
                 p0.50:              16.286 ms/op
                 p0.90:              16.286 ms/op
                 p0.95:              16.286 ms/op
                 p0.99:              16.286 ms/op
                 p0.999:             16.286 ms/op
                 p0.9999:            16.286 ms/op
                 p1.00:              16.286 ms/op

Iteration   2: 24.510 ms/op
                 gc.alloc.rate:      7.841 MB/sec
                 gc.alloc.rate.norm: 203488.000 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              24.510 ms/op
                 p0.50:              24.510 ms/op
                 p0.90:              24.510 ms/op
                 p0.95:              24.510 ms/op
                 p0.99:              24.510 ms/op
                 p0.999:             24.510 ms/op
                 p0.9999:            24.510 ms/op
                 p1.00:              24.510 ms/op

Iteration   3: 16.433 ms/op
                 gc.alloc.rate:      0.576 MB/sec
                 gc.alloc.rate.norm: 1282832.000 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              16.433 ms/op
                 p0.50:              16.433 ms/op
                 p0.90:              16.433 ms/op
                 p0.95:              16.433 ms/op
                 p0.99:              16.433 ms/op
                 p0.999:             16.433 ms/op
                 p0.9999:            16.433 ms/op
                 p1.00:              16.433 ms/op


# Run progress: 77.76% complete, ETA 00:00:30
# Fork: 2 of 3
# Warmup Iteration   1: 30.341 ±(99.9%) 12.423 ms/op
# Warmup Iteration   2: 27.581 ±(99.9%) 1.825 ms/op
Iteration   1: 21.758 ms/op
                 gc.alloc.rate:      8.763 MB/sec
                 gc.alloc.rate.norm: 203488.000 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              21.758 ms/op
                 p0.50:              21.758 ms/op
                 p0.90:              21.758 ms/op
                 p0.95:              21.758 ms/op
                 p0.99:              21.758 ms/op
                 p0.999:             21.758 ms/op
                 p0.9999:            21.758 ms/op
                 p1.00:              21.758 ms/op

Iteration   2: 21.398 ms/op
                 gc.alloc.rate:      8.959 MB/sec
                 gc.alloc.rate.norm: 203496.000 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              21.398 ms/op
                 p0.50:              21.398 ms/op
                 p0.90:              21.398 ms/op
                 p0.95:              21.398 ms/op
                 p0.99:              21.398 ms/op
                 p0.999:             21.398 ms/op
                 p0.9999:            21.398 ms/op
                 p1.00:              21.398 ms/op

Iteration   3: 20.382 ms/op
                 gc.alloc.rate:      0.562 MB/sec
                 gc.alloc.rate.norm: 1255504.000 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              20.382 ms/op
                 p0.50:              20.382 ms/op
                 p0.90:              20.382 ms/op
                 p0.95:              20.382 ms/op
                 p0.99:              20.382 ms/op
                 p0.999:             20.382 ms/op
                 p0.9999:            20.382 ms/op
                 p1.00:              20.382 ms/op


# Run progress: 88.86% complete, ETA 00:00:14
# Fork: 3 of 3
# Warmup Iteration   1: 46.897 ±(99.9%) 25.461 ms/op
# Warmup Iteration   2: 27.068 ±(99.9%) 4.027 ms/op
Iteration   1: 17.727 ms/op
                 gc.alloc.rate:      10.721 MB/sec
                 gc.alloc.rate.norm: 203464.000 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              17.727 ms/op
                 p0.50:              17.727 ms/op
                 p0.90:              17.727 ms/op
                 p0.95:              17.727 ms/op
                 p0.99:              17.727 ms/op
                 p0.999:             17.727 ms/op
                 p0.9999:            17.727 ms/op
                 p1.00:              17.727 ms/op

Iteration   2: 17.334 ms/op
                 gc.alloc.rate:      11.048 MB/sec
                 gc.alloc.rate.norm: 203480.000 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              17.334 ms/op
                 p0.50:              17.334 ms/op
                 p0.90:              17.334 ms/op
                 p0.95:              17.334 ms/op
                 p0.99:              17.334 ms/op
                 p0.999:             17.334 ms/op
                 p0.9999:            17.334 ms/op
                 p1.00:              17.334 ms/op

Iteration   3: 19.202 ms/op
                 gc.alloc.rate:      0.564 MB/sec
                 gc.alloc.rate.norm: 1254488.000 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              19.202 ms/op
                 p0.50:              19.202 ms/op
                 p0.90:              19.202 ms/op
                 p0.95:              19.202 ms/op
                 p0.99:              19.202 ms/op
                 p0.999:             19.202 ms/op
                 p0.9999:            19.202 ms/op
                 p1.00:              19.202 ms/op



Result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest":
  N = 9
  mean =     19.448 ±(99.9%) 4.686 ms/op

  Histogram, ms/op:
    [16.000, 16.500) = 2 
    [16.500, 17.000) = 0 
    [17.000, 17.500) = 1 
    [17.500, 18.000) = 1 
    [18.000, 18.500) = 0 
    [18.500, 19.000) = 0 
    [19.000, 19.500) = 1 
    [19.500, 20.000) = 0 
    [20.000, 20.500) = 1 
    [20.500, 21.000) = 0 
    [21.000, 21.500) = 1 
    [21.500, 22.000) = 1 
    [22.000, 22.500) = 0 
    [22.500, 23.000) = 0 
    [23.000, 23.500) = 0 
    [23.500, 24.000) = 0 
    [24.000, 24.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     16.286 ms/op
     p(50.0000) =     19.202 ms/op
     p(90.0000) =     24.510 ms/op
     p(95.0000) =     24.510 ms/op
     p(99.0000) =     24.510 ms/op
     p(99.9000) =     24.510 ms/op
     p(99.9900) =     24.510 ms/op
     p(99.9990) =     24.510 ms/op
     p(99.9999) =     24.510 ms/op
    p(100.0000) =     24.510 ms/op

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate":
  6.742 ±(99.9%) 8.038 MB/sec [Average]
  (min, avg, max) = (0.562, 6.742, 11.647), stdev = 4.783
  CI (99.9%): [≈ 0, 14.780] (assumes normal distribution)

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate.norm":
  557080.889 ±(99.9%) 891397.343 B/op [Average]
  (min, avg, max) = (203464.000, 557080.889, 1282832.000), stdev = 530456.261
  CI (99.9%): [≈ 0, 1448478.232] (assumes normal distribution)

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.count":
  ≈ 0 counts


# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest

# Run progress: 99.97% complete, ETA 00:00:00
# Fork: 1 of 3
# Warmup Iteration   1: 386.032 ms/op
# Warmup Iteration   2: 32.539 ms/op
Iteration   1: 26.989 ms/op
                 gc.alloc.rate:      5.956 MB/sec
                 gc.alloc.rate.norm: 169216.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 34.805 ms/op
                 gc.alloc.rate:      4.724 MB/sec
                 gc.alloc.rate.norm: 173360.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 23.887 ms/op
                 gc.alloc.rate:      0.558 MB/sec
                 gc.alloc.rate.norm: 1226912.000 B/op
                 gc.count:           ≈ 0 counts


# Run progress: 99.98% complete, ETA 00:00:00
# Fork: 2 of 3
# Warmup Iteration   1: 360.122 ms/op
# Warmup Iteration   2: 29.587 ms/op
Iteration   1: 20.964 ms/op
                 gc.alloc.rate:      7.768 MB/sec
                 gc.alloc.rate.norm: 171576.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 28.502 ms/op
                 gc.alloc.rate:      5.758 MB/sec
                 gc.alloc.rate.norm: 172536.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 27.832 ms/op
                 gc.alloc.rate:      0.553 MB/sec
                 gc.alloc.rate.norm: 1231072.000 B/op
                 gc.count:           ≈ 0 counts


# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 3 of 3
# Warmup Iteration   1: 368.410 ms/op
# Warmup Iteration   2: 24.463 ms/op
Iteration   1: 24.654 ms/op
                 gc.alloc.rate:      6.574 MB/sec
                 gc.alloc.rate.norm: 170560.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 23.494 ms/op
                 gc.alloc.rate:      9.492 MB/sec
                 gc.alloc.rate.norm: 234680.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 21.672 ms/op
                 gc.alloc.rate:      0.552 MB/sec
                 gc.alloc.rate.norm: 1227024.000 B/op
                 gc.count:           ≈ 0 counts



Result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest":
  N = 9
  mean =     25.867 ±(99.9%) 7.144 ms/op

  Histogram, ms/op:
    [20.000, 21.250) = 1 
    [21.250, 22.500) = 1 
    [22.500, 23.750) = 1 
    [23.750, 25.000) = 2 
    [25.000, 26.250) = 0 
    [26.250, 27.500) = 1 
    [27.500, 28.750) = 2 
    [28.750, 30.000) = 0 
    [30.000, 31.250) = 0 
    [31.250, 32.500) = 0 
    [32.500, 33.750) = 0 
    [33.750, 35.000) = 1 
    [35.000, 36.250) = 0 
    [36.250, 37.500) = 0 
    [37.500, 38.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     20.964 ms/op
     p(50.0000) =     24.654 ms/op
     p(90.0000) =     34.805 ms/op
     p(95.0000) =     34.805 ms/op
     p(99.0000) =     34.805 ms/op
     p(99.9000) =     34.805 ms/op
     p(99.9900) =     34.805 ms/op
     p(99.9990) =     34.805 ms/op
     p(99.9999) =     34.805 ms/op
    p(100.0000) =     34.805 ms/op

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate":
  4.659 ±(99.9%) 5.640 MB/sec [Average]
  (min, avg, max) = (0.552, 4.659, 9.492), stdev = 3.356
  CI (99.9%): [≈ 0, 10.300] (assumes normal distribution)

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate.norm":
  530770.667 ±(99.9%) 879832.953 B/op [Average]
  (min, avg, max) = (169216.000, 530770.667, 1231072.000), stdev = 523574.478
  CI (99.9%): [≈ 0, 1410603.620] (assumes normal distribution)

Secondary result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest:gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:02:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                        Mode  Cnt       Score         Error   Units
InfoServiceBenchmarkTest.getGadgetInfoTest                      thrpt    9       0.048 ±       0.020  ops/ms
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate        thrpt    9       5.122 ±       6.293  MB/sec
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate.norm   thrpt    9  528947.556 ±  893080.199    B/op
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.count             thrpt    9       1.000                counts
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.time              thrpt    9       6.000                    ms
InfoServiceBenchmarkTest.getGadgetInfoTest                       avgt    6      22.453 ±       7.877   ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate         avgt    6       5.247 ±      10.312  MB/sec
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate.norm    avgt    6  525785.333 ± 1524501.486    B/op
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.count              avgt    6         ≈ 0                counts
InfoServiceBenchmarkTest.getGadgetInfoTest                     sample    9      19.448 ±       4.686   ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate       sample    9       6.742 ±       8.038  MB/sec
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate.norm  sample    9  557080.889 ±  891397.343    B/op
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.count            sample    9         ≈ 0                counts
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.00               sample           16.286                 ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.50               sample           19.202                 ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.90               sample           24.510                 ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.95               sample           24.510                 ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.99               sample           24.510                 ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.999              sample           24.510                 ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.9999             sample           24.510                 ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p1.00               sample           24.510                 ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest                         ss    9      25.867 ±       7.144   ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate           ss    9       4.659 ±       5.640  MB/sec
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.alloc.rate.norm      ss    9  530770.667 ±  879832.953    B/op
InfoServiceBenchmarkTest.getGadgetInfoTest:gc.count                ss    9         ≈ 0                counts
