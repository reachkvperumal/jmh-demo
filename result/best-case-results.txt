# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.kv.jmh.util.metrics.RunWithArrayTest.trace

# Run progress: 0.00% complete, ETA 00:00:54
# Fork: 1 of 3
# Warmup Iteration   1: 10.700 ops/ms
# Warmup Iteration   2: 10.586 ops/ms
Iteration   1: 11.541 ops/ms
Iteration   2: 12.375 ops/ms
Iteration   3: 10.677 ops/ms

# Run progress: 11.11% complete, ETA 00:00:50
# Fork: 2 of 3
# Warmup Iteration   1: 10.533 ops/ms
# Warmup Iteration   2: 10.566 ops/ms
Iteration   1: 9.772 ops/ms
Iteration   2: 11.306 ops/ms
Iteration   3: 10.398 ops/ms

# Run progress: 22.22% complete, ETA 00:00:43
# Fork: 3 of 3
# Warmup Iteration   1: 10.599 ops/ms
# Warmup Iteration   2: 10.923 ops/ms
Iteration   1: 11.497 ops/ms
Iteration   2: 11.692 ops/ms
Iteration   3: 11.964 ops/ms


Result "com.kv.jmh.util.metrics.RunWithArrayTest.trace":
  11.247 ±(99.9%) 1.376 ops/ms [Average]
  (min, avg, max) = (9.772, 11.247, 12.375), stdev = 0.819
  CI (99.9%): [9.871, 12.622] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.kv.jmh.util.metrics.RunWithArrayTest.trace

# Run progress: 33.32% complete, ETA 00:00:37
# Fork: 1 of 3
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.087 ms/op
Iteration   1: 0.095 ms/op
Iteration   2: 0.099 ms/op
Iteration   3: 0.105 ms/op

# Run progress: 44.43% complete, ETA 00:00:31
# Fork: 2 of 3
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.089 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.059 ms/op

# Run progress: 55.54% complete, ETA 00:00:25
# Fork: 3 of 3
# Warmup Iteration   1: 0.082 ms/op
# Warmup Iteration   2: 0.090 ms/op
Iteration   1: 0.082 ms/op
Iteration   2: 0.082 ms/op
Iteration   3: 0.089 ms/op


Result "com.kv.jmh.util.metrics.RunWithArrayTest.trace":
  0.082 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.059, 0.082, 0.105), stdev = 0.016
  CI (99.9%): [0.055, 0.110] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kv.jmh.util.metrics.RunWithArrayTest.trace

# Run progress: 66.65% complete, ETA 00:00:18
# Fork: 1 of 3
# Warmup Iteration   1: 0.092 ±(99.9%) 0.001 ms/op
# Warmup Iteration   2: 0.089 ±(99.9%) 0.001 ms/op
Iteration   1: 0.113 ±(99.9%) 0.037 ms/op
                 p0.00:   0.050 ms/op
                 p0.50:   0.096 ms/op
                 p0.90:   0.237 ms/op
                 p0.95:   0.254 ms/op
                 p0.99:   0.267 ms/op
                 p0.999:  0.267 ms/op
                 p0.9999: 0.267 ms/op
                 p1.00:   0.267 ms/op

Iteration   2: 0.127 ±(99.9%) 0.059 ms/op
                 p0.00:   0.058 ms/op
                 p0.50:   0.110 ms/op
                 p0.90:   0.258 ms/op
                 p0.95:   0.355 ms/op
                 p0.99:   0.379 ms/op
                 p0.999:  0.379 ms/op
                 p0.9999: 0.379 ms/op
                 p1.00:   0.379 ms/op

Iteration   3: 0.100 ±(99.9%) 0.029 ms/op
                 p0.00:   0.050 ms/op
                 p0.50:   0.079 ms/op
                 p0.90:   0.197 ms/op
                 p0.95:   0.218 ms/op
                 p0.99:   0.240 ms/op
                 p0.999:  0.240 ms/op
                 p0.9999: 0.240 ms/op
                 p1.00:   0.240 ms/op


# Run progress: 77.76% complete, ETA 00:00:12
# Fork: 2 of 3
# Warmup Iteration   1: 0.094 ±(99.9%) 0.002 ms/op
# Warmup Iteration   2: 0.094 ±(99.9%) 0.001 ms/op
Iteration   1: 0.103 ±(99.9%) 0.039 ms/op
                 p0.00:   0.053 ms/op
                 p0.50:   0.080 ms/op
                 p0.90:   0.216 ms/op
                 p0.95:   0.257 ms/op
                 p0.99:   0.386 ms/op
                 p0.999:  0.386 ms/op
                 p0.9999: 0.386 ms/op
                 p1.00:   0.386 ms/op

Iteration   2: 0.100 ±(99.9%) 0.043 ms/op
                 p0.00:   0.050 ms/op
                 p0.50:   0.082 ms/op
                 p0.90:   0.132 ms/op
                 p0.95:   0.209 ms/op
                 p0.99:   0.508 ms/op
                 p0.999:  0.508 ms/op
                 p0.9999: 0.508 ms/op
                 p1.00:   0.508 ms/op

Iteration   3: 0.090 ±(99.9%) 0.048 ms/op
                 p0.00:   0.043 ms/op
                 p0.50:   0.073 ms/op
                 p0.90:   0.129 ms/op
                 p0.95:   0.199 ms/op
                 p0.99:   0.622 ms/op
                 p0.999:  0.622 ms/op
                 p0.9999: 0.622 ms/op
                 p1.00:   0.622 ms/op


# Run progress: 88.86% complete, ETA 00:00:06
# Fork: 3 of 3
# Warmup Iteration   1: 0.095 ±(99.9%) 0.002 ms/op
# Warmup Iteration   2: 0.095 ±(99.9%) 0.001 ms/op
Iteration   1: 0.109 ±(99.9%) 0.037 ms/op
                 p0.00:   0.053 ms/op
                 p0.50:   0.091 ms/op
                 p0.90:   0.219 ms/op
                 p0.95:   0.286 ms/op
                 p0.99:   0.326 ms/op
                 p0.999:  0.326 ms/op
                 p0.9999: 0.326 ms/op
                 p1.00:   0.326 ms/op

Iteration   2: 0.104 ±(99.9%) 0.059 ms/op
                 p0.00:   0.045 ms/op
                 p0.50:   0.076 ms/op
                 p0.90:   0.135 ms/op
                 p0.95:   0.475 ms/op
                 p0.99:   0.531 ms/op
                 p0.999:  0.531 ms/op
                 p0.9999: 0.531 ms/op
                 p1.00:   0.531 ms/op

Iteration   3: 0.087 ±(99.9%) 0.032 ms/op
                 p0.00:   0.051 ms/op
                 p0.50:   0.076 ms/op
                 p0.90:   0.094 ms/op
                 p0.95:   0.179 ms/op
                 p0.99:   0.446 ms/op
                 p0.999:  0.446 ms/op
                 p0.9999: 0.446 ms/op
                 p1.00:   0.446 ms/op



Result "com.kv.jmh.util.metrics.RunWithArrayTest.trace":
  N = 333
  mean =      0.102 ±(99.9%) 0.013 ms/op

  Histogram, ms/op:
    [0.000, 0.050) = 8 
    [0.050, 0.100) = 230 
    [0.100, 0.150) = 60 
    [0.150, 0.200) = 9 
    [0.200, 0.250) = 15 
    [0.250, 0.300) = 2 
    [0.300, 0.350) = 2 
    [0.350, 0.400) = 2 
    [0.400, 0.450) = 1 
    [0.450, 0.500) = 1 
    [0.500, 0.550) = 2 
    [0.550, 0.600) = 0 
    [0.600, 0.650) = 1 

  Percentiles, ms/op:
      p(0.0000) =      0.043 ms/op
     p(50.0000) =      0.081 ms/op
     p(90.0000) =      0.178 ms/op
     p(95.0000) =      0.232 ms/op
     p(99.0000) =      0.495 ms/op
     p(99.9000) =      0.622 ms/op
     p(99.9900) =      0.622 ms/op
     p(99.9990) =      0.622 ms/op
     p(99.9999) =      0.622 ms/op
    p(100.0000) =      0.622 ms/op


# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.kv.jmh.util.metrics.RunWithArrayTest.trace

# Run progress: 99.97% complete, ETA 00:00:00
# Fork: 1 of 3
# Warmup Iteration   1: 0.704 ms/op
# Warmup Iteration   2: 0.114 ms/op
Iteration   1: 0.076 ms/op
Iteration   2: 0.077 ms/op
Iteration   3: 0.100 ms/op

# Run progress: 99.98% complete, ETA 00:00:00
# Fork: 2 of 3
# Warmup Iteration   1: 0.721 ms/op
# Warmup Iteration   2: 0.097 ms/op
Iteration   1: 0.117 ms/op
Iteration   2: 0.081 ms/op
Iteration   3: 0.109 ms/op

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 3 of 3
# Warmup Iteration   1: 0.744 ms/op
# Warmup Iteration   2: 0.089 ms/op
Iteration   1: 0.104 ms/op
Iteration   2: 0.088 ms/op
Iteration   3: 0.093 ms/op


Result "com.kv.jmh.util.metrics.RunWithArrayTest.trace":
  N = 9
  mean =      0.094 ±(99.9%) 0.025 ms/op

  Histogram, ms/op:
    [0.070, 0.073) = 0 
    [0.073, 0.075) = 0 
    [0.075, 0.078) = 2 
    [0.078, 0.080) = 0 
    [0.080, 0.083) = 1 
    [0.083, 0.085) = 0 
    [0.085, 0.088) = 0 
    [0.088, 0.090) = 1 
    [0.090, 0.093) = 0 
    [0.093, 0.095) = 1 
    [0.095, 0.098) = 0 
    [0.098, 0.100) = 1 
    [0.100, 0.103) = 0 
    [0.103, 0.105) = 1 
    [0.105, 0.108) = 0 
    [0.108, 0.110) = 1 
    [0.110, 0.113) = 0 
    [0.113, 0.115) = 0 
    [0.115, 0.118) = 1 

  Percentiles, ms/op:
      p(0.0000) =      0.076 ms/op
     p(50.0000) =      0.093 ms/op
     p(90.0000) =      0.117 ms/op
     p(95.0000) =      0.117 ms/op
     p(99.0000) =      0.117 ms/op
     p(99.9000) =      0.117 ms/op
     p(99.9900) =      0.117 ms/op
     p(99.9990) =      0.117 ms/op
     p(99.9999) =      0.117 ms/op
    p(100.0000) =      0.117 ms/op


# Run complete. Total time: 00:00:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                         Mode  Cnt   Score   Error   Units
RunWithArrayTest.trace           thrpt    9  11.247 ± 1.376  ops/ms
RunWithArrayTest.trace            avgt    9   0.082 ± 0.028   ms/op
RunWithArrayTest.trace          sample  333   0.102 ± 0.013   ms/op
RunWithArrayTest.trace:p0.00    sample        0.043           ms/op
RunWithArrayTest.trace:p0.50    sample        0.081           ms/op
RunWithArrayTest.trace:p0.90    sample        0.178           ms/op
RunWithArrayTest.trace:p0.95    sample        0.232           ms/op
RunWithArrayTest.trace:p0.99    sample        0.495           ms/op
RunWithArrayTest.trace:p0.999   sample        0.622           ms/op
RunWithArrayTest.trace:p0.9999  sample        0.622           ms/op
RunWithArrayTest.trace:p1.00    sample        0.622           ms/op
RunWithArrayTest.trace              ss    9   0.094 ± 0.025   ms/op
