# JMH version: 1.37
# VM version: JDK 23.0.2, OpenJDK 64-Bit Server VM, 23.0.2
# VM invoker: /opt/homebrew/Cellar/openjdk/23.0.2/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.kv.jmh.util.metrics.GCExample.stringBuilder

# Run progress: 0.00% complete, ETA 00:00:20
# Fork: 1 of 1
# Warmup Iteration   1: 118.209 ns/op
# Warmup Iteration   2: 112.996 ns/op
# Warmup Iteration   3: 111.275 ns/op
# Warmup Iteration   4: 109.590 ns/op
# Warmup Iteration   5: 107.738 ns/op
Iteration   1: 108.946 ns/op
                 gc.alloc.rate:      4201.210 MB/sec
                 gc.alloc.rate.norm: 480.001 B/op
                 gc.count:           4.000 counts
                 gc.time:            2.000 ms

Iteration   2: 110.529 ns/op
                 gc.alloc.rate:      4141.061 MB/sec
                 gc.alloc.rate.norm: 480.001 B/op
                 gc.count:           5.000 counts
                 gc.time:            3.000 ms

Iteration   3: 109.947 ns/op
                 gc.alloc.rate:      4162.936 MB/sec
                 gc.alloc.rate.norm: 480.001 B/op
                 gc.count:           4.000 counts
                 gc.time:            3.000 ms

Iteration   4: 109.505 ns/op
                 gc.alloc.rate:      4179.596 MB/sec
                 gc.alloc.rate.norm: 480.001 B/op
                 gc.count:           4.000 counts
                 gc.time:            3.000 ms

Iteration   5: 108.718 ns/op
                 gc.alloc.rate:      4209.763 MB/sec
                 gc.alloc.rate.norm: 480.001 B/op
                 gc.count:           5.000 counts
                 gc.time:            3.000 ms



Result "com.kv.jmh.util.metrics.GCExample.stringBuilder":
  109.529 ±(99.9%) 2.839 ns/op [Average]
  (min, avg, max) = (108.718, 109.529, 110.529), stdev = 0.737
  CI (99.9%): [106.690, 112.368] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.GCExample.stringBuilder:gc.alloc.rate":
  4178.913 ±(99.9%) 107.842 MB/sec [Average]
  (min, avg, max) = (4141.061, 4178.913, 4209.763), stdev = 28.006
  CI (99.9%): [4071.072, 4286.755] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.GCExample.stringBuilder:gc.alloc.rate.norm":
  480.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (480.001, 480.001, 480.001), stdev = 0.001
  CI (99.9%): [480.001, 480.001] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.GCExample.stringBuilder:gc.count":
  22.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.GCExample.stringBuilder:gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23.0.2, OpenJDK 64-Bit Server VM, 23.0.2
# VM invoker: /opt/homebrew/Cellar/openjdk/23.0.2/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.kv.jmh.util.metrics.GCExample.stringConcat

# Run progress: 50.00% complete, ETA 00:00:10
# Fork: 1 of 1
# Warmup Iteration   1: 888.098 ns/op
# Warmup Iteration   2: 854.893 ns/op
# Warmup Iteration   3: 933.442 ns/op
# Warmup Iteration   4: 896.568 ns/op
# Warmup Iteration   5: 900.819 ns/op
Iteration   1: 897.819 ns/op
                 gc.alloc.rate:      9966.198 MB/sec
                 gc.alloc.rate.norm: 9384.006 B/op
                 gc.count:           6.000 counts
                 gc.time:            5.000 ms

Iteration   2: 896.914 ns/op
                 gc.alloc.rate:      9976.355 MB/sec
                 gc.alloc.rate.norm: 9384.006 B/op
                 gc.count:           6.000 counts
                 gc.time:            4.000 ms

Iteration   3: 893.601 ns/op
                 gc.alloc.rate:      10013.641 MB/sec
                 gc.alloc.rate.norm: 9384.006 B/op
                 gc.count:           6.000 counts
                 gc.time:            5.000 ms

Iteration   4: 897.459 ns/op
                 gc.alloc.rate:      9970.418 MB/sec
                 gc.alloc.rate.norm: 9384.006 B/op
                 gc.count:           6.000 counts
                 gc.time:            6.000 ms

Iteration   5: 915.451 ns/op
                 gc.alloc.rate:      9773.834 MB/sec
                 gc.alloc.rate.norm: 9384.006 B/op
                 gc.count:           6.000 counts
                 gc.time:            7.000 ms



Result "com.kv.jmh.util.metrics.GCExample.stringConcat":
  900.249 ±(99.9%) 33.353 ns/op [Average]
  (min, avg, max) = (893.601, 900.249, 915.451), stdev = 8.662
  CI (99.9%): [866.896, 933.603] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.GCExample.stringConcat:gc.alloc.rate":
  9940.089 ±(99.9%) 365.138 MB/sec [Average]
  (min, avg, max) = (9773.834, 9940.089, 10013.641), stdev = 94.825
  CI (99.9%): [9574.951, 10305.227] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.GCExample.stringConcat:gc.alloc.rate.norm":
  9384.006 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (9384.006, 9384.006, 9384.006), stdev = 0.001
  CI (99.9%): [9384.006, 9384.006] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.GCExample.stringConcat:gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.GCExample.stringConcat:gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# Run complete. Total time: 00:00:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                   Mode  Cnt     Score     Error   Units
GCExample.stringBuilder                     avgt    5   109.529 ±   2.839   ns/op
GCExample.stringBuilder:gc.alloc.rate       avgt    5  4178.913 ± 107.842  MB/sec
GCExample.stringBuilder:gc.alloc.rate.norm  avgt    5   480.001 ±   0.001    B/op
GCExample.stringBuilder:gc.count            avgt    5    22.000            counts
GCExample.stringBuilder:gc.time             avgt    5    14.000                ms
GCExample.stringConcat                      avgt    5   900.249 ±  33.353   ns/op
GCExample.stringConcat:gc.alloc.rate        avgt    5  9940.089 ± 365.138  MB/sec
GCExample.stringConcat:gc.alloc.rate.norm   avgt    5  9384.006 ±   0.001    B/op
GCExample.stringConcat:gc.count             avgt    5    30.000            counts
GCExample.stringConcat:gc.time              avgt    5    27.000                ms
