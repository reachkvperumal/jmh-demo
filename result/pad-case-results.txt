# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.kv.jmh.util.metrics.RunWithPadTest.trace

# Run progress: 0.00% complete, ETA 00:05:24
# Fork: 1 of 3
# Warmup Iteration   1: 0.017 ops/ms
# Warmup Iteration   2: 0.016 ops/ms
Iteration   1: 0.017 ops/ms
                 gc.alloc.rate:      0.055 MB/sec
                 gc.alloc.rate.norm: 3456.568 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 0.017 ops/ms
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3462.541 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 0.017 ops/ms
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3467.602 B/op
                 gc.count:           ≈ 0 counts


# Run progress: 11.11% complete, ETA 00:04:52
# Fork: 2 of 3
# Warmup Iteration   1: 0.017 ops/ms
# Warmup Iteration   2: 0.017 ops/ms
Iteration   1: 0.017 ops/ms
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3456.094 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 0.017 ops/ms
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3462.541 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 0.017 ops/ms
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3468.213 B/op
                 gc.count:           ≈ 0 counts


# Run progress: 22.22% complete, ETA 00:04:15
# Fork: 3 of 3
# Warmup Iteration   1: 0.017 ops/ms
# Warmup Iteration   2: 0.017 ops/ms
Iteration   1: 0.017 ops/ms
                 gc.alloc.rate:      0.057 MB/sec
                 gc.alloc.rate.norm: 3455.860 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 0.017 ops/ms
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3462.269 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 0.017 ops/ms
                 gc.alloc.rate:      0.057 MB/sec
                 gc.alloc.rate.norm: 3466.529 B/op
                 gc.count:           ≈ 0 counts



Result "com.kv.jmh.util.metrics.RunWithPadTest.trace":
  0.017 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.017, 0.017, 0.017), stdev = 0.001
  CI (99.9%): [0.017, 0.017] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.RunWithPadTest.trace:gc.alloc.rate":
  0.056 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.055, 0.056, 0.057), stdev = 0.001
  CI (99.9%): [0.055, 0.057] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.RunWithPadTest.trace:gc.alloc.rate.norm":
  3462.024 ±(99.9%) 8.259 B/op [Average]
  (min, avg, max) = (3455.860, 3462.024, 3468.213), stdev = 4.915
  CI (99.9%): [3453.765, 3470.283] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.RunWithPadTest.trace:gc.count":
  ≈ 0 counts


# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.kv.jmh.util.metrics.RunWithPadTest.trace

# Run progress: 33.33% complete, ETA 00:03:38
# Fork: 1 of 3
# Warmup Iteration   1: 60.145 ms/op
# Warmup Iteration   2: 57.583 ms/op
Iteration   1: 58.597 ms/op
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3456.094 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 58.783 ms/op
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3462.456 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 59.314 ms/op
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3468.024 B/op
                 gc.count:           ≈ 0 counts


# Run progress: 44.44% complete, ETA 00:03:02
# Fork: 2 of 3
# Warmup Iteration   1: 59.708 ms/op
# Warmup Iteration   2: 59.431 ms/op
Iteration   1: 58.819 ms/op
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3456.094 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 59.459 ms/op
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3462.817 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 58.342 ms/op
                 gc.alloc.rate:      0.057 MB/sec
                 gc.alloc.rate.norm: 3467.116 B/op
                 gc.count:           ≈ 0 counts


# Run progress: 55.55% complete, ETA 00:02:25
# Fork: 3 of 3
# Warmup Iteration   1: 59.035 ms/op
# Warmup Iteration   2: 59.723 ms/op
Iteration   1: 58.830 ms/op
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3456.094 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 59.453 ms/op
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3463.006 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 59.366 ms/op
                 gc.alloc.rate:      0.056 MB/sec
                 gc.alloc.rate.norm: 3468.213 B/op
                 gc.count:           ≈ 0 counts



Result "com.kv.jmh.util.metrics.RunWithPadTest.trace":
  58.996 ±(99.9%) 0.691 ms/op [Average]
  (min, avg, max) = (58.342, 58.996, 59.459), stdev = 0.411
  CI (99.9%): [58.305, 59.686] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.RunWithPadTest.trace:gc.alloc.rate":
  0.056 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.056, 0.056, 0.057), stdev = 0.001
  CI (99.9%): [0.055, 0.057] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.RunWithPadTest.trace:gc.alloc.rate.norm":
  3462.212 ±(99.9%) 8.552 B/op [Average]
  (min, avg, max) = (3456.094, 3462.212, 3468.213), stdev = 5.089
  CI (99.9%): [3453.660, 3470.765] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.RunWithPadTest.trace:gc.count":
  ≈ 0 counts


# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kv.jmh.util.metrics.RunWithPadTest.trace

# Run progress: 66.66% complete, ETA 00:01:49
# Fork: 1 of 3
# Warmup Iteration   1: 60.504 ±(99.9%) 3.436 ms/op
# Warmup Iteration   2: 58.745 ±(99.9%) 3.397 ms/op
Iteration   1: 59.357 ±(99.9%) 2.112 ms/op
                 gc.alloc.rate:      0.062 MB/sec
                 gc.alloc.rate.norm: 3832.473 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              43.188 ms/op
                 p0.50:              57.541 ms/op
                 p0.90:              72.090 ms/op
                 p0.95:              74.252 ms/op
                 p0.99:              78.892 ms/op
                 p0.999:             80.085 ms/op
                 p0.9999:            80.085 ms/op
                 p1.00:              80.085 ms/op

Iteration   2: 58.676 ±(99.9%) 2.107 ms/op
                 gc.alloc.rate:      0.062 MB/sec
                 gc.alloc.rate.norm: 3842.901 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              44.958 ms/op
                 p0.50:              57.147 ms/op
                 p0.90:              69.678 ms/op
                 p0.95:              74.580 ms/op
                 p0.99:              80.342 ms/op
                 p0.999:             83.362 ms/op
                 p0.9999:            83.362 ms/op
                 p1.00:              83.362 ms/op

Iteration   3: 58.946 ±(99.9%) 2.285 ms/op
                 gc.alloc.rate:      0.062 MB/sec
                 gc.alloc.rate.norm: 3830.729 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              42.074 ms/op
                 p0.50:              57.344 ms/op
                 p0.90:              71.657 ms/op
                 p0.95:              73.754 ms/op
                 p0.99:              85.497 ms/op
                 p0.999:             85.590 ms/op
                 p0.9999:            85.590 ms/op
                 p1.00:              85.590 ms/op


# Run progress: 77.77% complete, ETA 00:01:12
# Fork: 2 of 3
# Warmup Iteration   1: 59.238 ±(99.9%) 4.219 ms/op
# Warmup Iteration   2: 60.722 ±(99.9%) 4.101 ms/op
Iteration   1: 58.534 ±(99.9%) 1.892 ms/op
                 gc.alloc.rate:      0.062 MB/sec
                 gc.alloc.rate.norm: 3831.673 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              45.154 ms/op
                 p0.50:              57.344 ms/op
                 p0.90:              69.311 ms/op
                 p0.95:              71.565 ms/op
                 p0.99:              75.272 ms/op
                 p0.999:             75.366 ms/op
                 p0.9999:            75.366 ms/op
                 p1.00:              75.366 ms/op

Iteration   2: 58.577 ±(99.9%) 2.031 ms/op
                 gc.alloc.rate:      0.062 MB/sec
                 gc.alloc.rate.norm: 3826.339 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              45.416 ms/op
                 p0.50:              57.475 ms/op
                 p0.90:              69.914 ms/op
                 p0.95:              73.662 ms/op
                 p0.99:              76.714 ms/op
                 p0.999:             76.808 ms/op
                 p0.9999:            76.808 ms/op
                 p1.00:              76.808 ms/op

Iteration   3: 58.500 ±(99.9%) 2.288 ms/op
                 gc.alloc.rate:      0.063 MB/sec
                 gc.alloc.rate.norm: 3837.053 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              43.254 ms/op
                 p0.50:              57.016 ms/op
                 p0.90:              71.670 ms/op
                 p0.95:              73.584 ms/op
                 p0.99:              84.064 ms/op
                 p0.999:             85.197 ms/op
                 p0.9999:            85.197 ms/op
                 p1.00:              85.197 ms/op


# Run progress: 88.88% complete, ETA 00:00:36
# Fork: 3 of 3
# Warmup Iteration   1: 59.264 ±(99.9%) 4.390 ms/op
# Warmup Iteration   2: 58.438 ±(99.9%) 4.055 ms/op
Iteration   1: 58.901 ±(99.9%) 2.222 ms/op
                 gc.alloc.rate:      0.062 MB/sec
                 gc.alloc.rate.norm: 3835.529 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              42.664 ms/op
                 p0.50:              56.852 ms/op
                 p0.90:              71.683 ms/op
                 p0.95:              74.514 ms/op
                 p0.99:              77.768 ms/op
                 p0.999:             78.512 ms/op
                 p0.9999:            78.512 ms/op
                 p1.00:              78.512 ms/op

Iteration   2: 57.510 ±(99.9%) 2.362 ms/op
                 gc.alloc.rate:      0.063 MB/sec
                 gc.alloc.rate.norm: 3819.494 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              41.878 ms/op
                 p0.50:              55.378 ms/op
                 p0.90:              70.189 ms/op
                 p0.95:              75.760 ms/op
                 p0.99:              85.918 ms/op
                 p0.999:             89.653 ms/op
                 p0.9999:            89.653 ms/op
                 p1.00:              89.653 ms/op

Iteration   3: 59.945 ±(99.9%) 2.708 ms/op
                 gc.alloc.rate:      0.061 MB/sec
                 gc.alloc.rate.norm: 3847.617 B/op
                 gc.count:           ≈ 0 counts
                 p0.00:              42.795 ms/op
                 p0.50:              58.589 ms/op
                 p0.90:              75.760 ms/op
                 p0.95:              79.613 ms/op
                 p0.99:              85.606 ms/op
                 p0.999:             87.032 ms/op
                 p0.9999:            87.032 ms/op
                 p1.00:              87.032 ms/op



Result "com.kv.jmh.util.metrics.RunWithPadTest.trace":
  N = 1534
  mean =     58.765 ±(99.9%) 0.732 ms/op

  Histogram, ms/op:
    [40.000, 45.000) = 20 
    [45.000, 50.000) = 196 
    [50.000, 55.000) = 410 
    [55.000, 60.000) = 293 
    [60.000, 65.000) = 221 
    [65.000, 70.000) = 205 
    [70.000, 75.000) = 125 
    [75.000, 80.000) = 45 
    [80.000, 85.000) = 14 

  Percentiles, ms/op:
      p(0.0000) =     41.878 ms/op
     p(50.0000) =     57.082 ms/op
     p(90.0000) =     71.369 ms/op
     p(95.0000) =     74.482 ms/op
     p(99.0000) =     80.386 ms/op
     p(99.9000) =     88.251 ms/op
     p(99.9900) =     89.653 ms/op
     p(99.9990) =     89.653 ms/op
     p(99.9999) =     89.653 ms/op
    p(100.0000) =     89.653 ms/op

Secondary result "com.kv.jmh.util.metrics.RunWithPadTest.trace:gc.alloc.rate":
  0.062 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.061, 0.062, 0.063), stdev = 0.001
  CI (99.9%): [0.061, 0.063] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.RunWithPadTest.trace:gc.alloc.rate.norm":
  3833.756 ±(99.9%) 14.101 B/op [Average]
  (min, avg, max) = (3819.494, 3833.756, 3847.617), stdev = 8.391
  CI (99.9%): [3819.655, 3847.857] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.RunWithPadTest.trace:gc.count":
  ≈ 0 counts


# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.kv.jmh.util.metrics.RunWithPadTest.trace

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 3
# Warmup Iteration   1: 64.282 ms/op
# Warmup Iteration   2: 58.524 ms/op
Iteration   1: 56.810 ms/op
                 gc.alloc.rate:      0.170 MB/sec
                 gc.alloc.rate.norm: 10144.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 57.815 ms/op
                 gc.alloc.rate:      0.167 MB/sec
                 gc.alloc.rate.norm: 10144.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 71.074 ms/op
                 gc.alloc.rate:      0.146 MB/sec
                 gc.alloc.rate.norm: 10864.000 B/op
                 gc.count:           ≈ 0 counts


# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 2 of 3
# Warmup Iteration   1: 69.672 ms/op
# Warmup Iteration   2: 64.769 ms/op
Iteration   1: 84.239 ms/op
                 gc.alloc.rate:      0.115 MB/sec
                 gc.alloc.rate.norm: 10144.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 95.055 ms/op
                 gc.alloc.rate:      0.102 MB/sec
                 gc.alloc.rate.norm: 10144.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 76.779 ms/op
                 gc.alloc.rate:      0.135 MB/sec
                 gc.alloc.rate.norm: 10864.000 B/op
                 gc.count:           ≈ 0 counts


# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 3 of 3
# Warmup Iteration   1: 102.278 ms/op
# Warmup Iteration   2: 68.176 ms/op
Iteration   1: 67.654 ms/op
                 gc.alloc.rate:      0.143 MB/sec
                 gc.alloc.rate.norm: 10144.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   2: 73.994 ms/op
                 gc.alloc.rate:      0.130 MB/sec
                 gc.alloc.rate.norm: 10144.000 B/op
                 gc.count:           ≈ 0 counts

Iteration   3: 82.813 ms/op
                 gc.alloc.rate:      0.125 MB/sec
                 gc.alloc.rate.norm: 10864.000 B/op
                 gc.count:           ≈ 0 counts



Result "com.kv.jmh.util.metrics.RunWithPadTest.trace":
  N = 9
  mean =     74.026 ±(99.9%) 20.920 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 2 
    [ 60.000,  65.000) = 0 
    [ 65.000,  70.000) = 1 
    [ 70.000,  75.000) = 2 
    [ 75.000,  80.000) = 1 
    [ 80.000,  85.000) = 2 
    [ 85.000,  90.000) = 0 
    [ 90.000,  95.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     56.810 ms/op
     p(50.0000) =     73.994 ms/op
     p(90.0000) =     95.055 ms/op
     p(95.0000) =     95.055 ms/op
     p(99.0000) =     95.055 ms/op
     p(99.9000) =     95.055 ms/op
     p(99.9900) =     95.055 ms/op
     p(99.9990) =     95.055 ms/op
     p(99.9999) =     95.055 ms/op
    p(100.0000) =     95.055 ms/op

Secondary result "com.kv.jmh.util.metrics.RunWithPadTest.trace:gc.alloc.rate":
  0.137 ±(99.9%) 0.038 MB/sec [Average]
  (min, avg, max) = (0.102, 0.137, 0.170), stdev = 0.022
  CI (99.9%): [0.099, 0.175] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.RunWithPadTest.trace:gc.alloc.rate.norm":
  10384.000 ±(99.9%) 604.957 B/op [Average]
  (min, avg, max) = (10144.000, 10384.000, 10864.000), stdev = 360.000
  CI (99.9%): [9779.043, 10988.957] (assumes normal distribution)

Secondary result "com.kv.jmh.util.metrics.RunWithPadTest.trace:gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:05:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  Mode   Cnt      Score     Error   Units
RunWithPadTest.trace                      thrpt     9      0.017 ±   0.001  ops/ms
RunWithPadTest.trace:gc.alloc.rate        thrpt     9      0.056 ±   0.001  MB/sec
RunWithPadTest.trace:gc.alloc.rate.norm   thrpt     9   3462.024 ±   8.259    B/op
RunWithPadTest.trace:gc.count             thrpt     9        ≈ 0            counts
RunWithPadTest.trace                       avgt     9     58.996 ±   0.691   ms/op
RunWithPadTest.trace:gc.alloc.rate         avgt     9      0.056 ±   0.001  MB/sec
RunWithPadTest.trace:gc.alloc.rate.norm    avgt     9   3462.212 ±   8.552    B/op
RunWithPadTest.trace:gc.count              avgt     9        ≈ 0            counts
RunWithPadTest.trace                     sample  1534     58.765 ±   0.732   ms/op
RunWithPadTest.trace:gc.alloc.rate       sample     9      0.062 ±   0.001  MB/sec
RunWithPadTest.trace:gc.alloc.rate.norm  sample     9   3833.756 ±  14.101    B/op
RunWithPadTest.trace:gc.count            sample     9        ≈ 0            counts
RunWithPadTest.trace:p0.00               sample           41.878             ms/op
RunWithPadTest.trace:p0.50               sample           57.082             ms/op
RunWithPadTest.trace:p0.90               sample           71.369             ms/op
RunWithPadTest.trace:p0.95               sample           74.482             ms/op
RunWithPadTest.trace:p0.99               sample           80.386             ms/op
RunWithPadTest.trace:p0.999              sample           88.251             ms/op
RunWithPadTest.trace:p0.9999             sample           89.653             ms/op
RunWithPadTest.trace:p1.00               sample           89.653             ms/op
RunWithPadTest.trace                         ss     9     74.026 ±  20.920   ms/op
RunWithPadTest.trace:gc.alloc.rate           ss     9      0.137 ±   0.038  MB/sec
RunWithPadTest.trace:gc.alloc.rate.norm      ss     9  10384.000 ± 604.957    B/op
RunWithPadTest.trace:gc.count                ss     9        ≈ 0            counts
