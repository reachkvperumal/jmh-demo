# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.kv.jmh.util.metrics.RunWithListTest.trace

# Run progress: 0.00% complete, ETA 00:00:54
# Fork: 1 of 3
# Warmup Iteration   1: 10.240 ops/ms
# Warmup Iteration   2: 10.371 ops/ms
Iteration   1: 12.158 ops/ms
Iteration   2: 10.673 ops/ms
Iteration   3: 11.352 ops/ms

# Run progress: 11.11% complete, ETA 00:00:50
# Fork: 2 of 3
# Warmup Iteration   1: 10.326 ops/ms
# Warmup Iteration   2: 10.664 ops/ms
Iteration   1: 11.872 ops/ms
Iteration   2: 10.234 ops/ms
Iteration   3: 11.008 ops/ms

# Run progress: 22.22% complete, ETA 00:00:43
# Fork: 3 of 3
# Warmup Iteration   1: 10.359 ops/ms
# Warmup Iteration   2: 11.484 ops/ms
Iteration   1: 14.525 ops/ms
Iteration   2: 11.540 ops/ms
Iteration   3: 10.370 ops/ms


Result "com.kv.jmh.util.metrics.RunWithListTest.trace":
  11.526 ±(99.9%) 2.187 ops/ms [Average]
  (min, avg, max) = (10.234, 11.526, 14.525), stdev = 1.301
  CI (99.9%): [9.339, 13.713] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.kv.jmh.util.metrics.RunWithListTest.trace

# Run progress: 33.32% complete, ETA 00:00:37
# Fork: 1 of 3
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.095 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.089 ms/op
Iteration   3: 0.094 ms/op

# Run progress: 44.43% complete, ETA 00:00:31
# Fork: 2 of 3
# Warmup Iteration   1: 0.097 ms/op
# Warmup Iteration   2: 0.095 ms/op
Iteration   1: 0.104 ms/op
Iteration   2: 0.093 ms/op
Iteration   3: 0.099 ms/op

# Run progress: 55.54% complete, ETA 00:00:25
# Fork: 3 of 3
# Warmup Iteration   1: 0.094 ms/op
# Warmup Iteration   2: 0.094 ms/op
Iteration   1: 0.104 ms/op
Iteration   2: 0.100 ms/op
Iteration   3: 0.096 ms/op


Result "com.kv.jmh.util.metrics.RunWithListTest.trace":
  0.097 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.089, 0.097, 0.104), stdev = 0.005
  CI (99.9%): [0.088, 0.106] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kv.jmh.util.metrics.RunWithListTest.trace

# Run progress: 66.65% complete, ETA 00:00:18
# Fork: 1 of 3
# Warmup Iteration   1: 0.098 ±(99.9%) 0.002 ms/op
# Warmup Iteration   2: 0.096 ±(99.9%) 0.001 ms/op
Iteration   1: 0.111 ±(99.9%) 0.035 ms/op
                 p0.00:   0.060 ms/op
                 p0.50:   0.088 ms/op
                 p0.90:   0.194 ms/op
                 p0.95:   0.262 ms/op
                 p0.99:   0.327 ms/op
                 p0.999:  0.327 ms/op
                 p0.9999: 0.327 ms/op
                 p1.00:   0.327 ms/op

Iteration   2: 0.162 ±(99.9%) 0.125 ms/op
                 p0.00:   0.061 ms/op
                 p0.50:   0.112 ms/op
                 p0.90:   0.382 ms/op
                 p0.95:   0.708 ms/op
                 p0.99:   0.773 ms/op
                 p0.999:  0.773 ms/op
                 p0.9999: 0.773 ms/op
                 p1.00:   0.773 ms/op

Iteration   3: 0.113 ±(99.9%) 0.041 ms/op
                 p0.00:   0.059 ms/op
                 p0.50:   0.084 ms/op
                 p0.90:   0.184 ms/op
                 p0.95:   0.296 ms/op
                 p0.99:   0.393 ms/op
                 p0.999:  0.393 ms/op
                 p0.9999: 0.393 ms/op
                 p1.00:   0.393 ms/op


# Run progress: 77.76% complete, ETA 00:00:12
# Fork: 2 of 3
# Warmup Iteration   1: 0.101 ±(99.9%) 0.002 ms/op
# Warmup Iteration   2: 0.098 ±(99.9%) 0.001 ms/op
Iteration   1: 0.113 ±(99.9%) 0.054 ms/op
                 p0.00:   0.064 ms/op
                 p0.50:   0.082 ms/op
                 p0.90:   0.218 ms/op
                 p0.95:   0.319 ms/op
                 p0.99:   0.521 ms/op
                 p0.999:  0.521 ms/op
                 p0.9999: 0.521 ms/op
                 p1.00:   0.521 ms/op

Iteration   2: 0.100 ±(99.9%) 0.033 ms/op
                 p0.00:   0.057 ms/op
                 p0.50:   0.081 ms/op
                 p0.90:   0.165 ms/op
                 p0.95:   0.223 ms/op
                 p0.99:   0.363 ms/op
                 p0.999:  0.363 ms/op
                 p0.9999: 0.363 ms/op
                 p1.00:   0.363 ms/op

Iteration   3: 0.102 ±(99.9%) 0.042 ms/op
                 p0.00:   0.061 ms/op
                 p0.50:   0.081 ms/op
                 p0.90:   0.188 ms/op
                 p0.95:   0.279 ms/op
                 p0.99:   0.437 ms/op
                 p0.999:  0.437 ms/op
                 p0.9999: 0.437 ms/op
                 p1.00:   0.437 ms/op


# Run progress: 88.86% complete, ETA 00:00:06
# Fork: 3 of 3
# Warmup Iteration   1: 0.098 ±(99.9%) 0.002 ms/op
# Warmup Iteration   2: 0.096 ±(99.9%) 0.001 ms/op
Iteration   1: 0.106 ±(99.9%) 0.025 ms/op
                 p0.00:   0.064 ms/op
                 p0.50:   0.091 ms/op
                 p0.90:   0.157 ms/op
                 p0.95:   0.221 ms/op
                 p0.99:   0.227 ms/op
                 p0.999:  0.227 ms/op
                 p0.9999: 0.227 ms/op
                 p1.00:   0.227 ms/op

Iteration   2: 0.093 ±(99.9%) 0.025 ms/op
                 p0.00:   0.054 ms/op
                 p0.50:   0.076 ms/op
                 p0.90:   0.151 ms/op
                 p0.95:   0.195 ms/op
                 p0.99:   0.290 ms/op
                 p0.999:  0.290 ms/op
                 p0.9999: 0.290 ms/op
                 p1.00:   0.290 ms/op

Iteration   3: 0.098 ±(99.9%) 0.028 ms/op
                 p0.00:   0.052 ms/op
                 p0.50:   0.080 ms/op
                 p0.90:   0.157 ms/op
                 p0.95:   0.227 ms/op
                 p0.99:   0.280 ms/op
                 p0.999:  0.280 ms/op
                 p0.9999: 0.280 ms/op
                 p1.00:   0.280 ms/op



Result "com.kv.jmh.util.metrics.RunWithListTest.trace":
  N = 317
  mean =      0.108 ±(99.9%) 0.014 ms/op

  Histogram, ms/op:
    [0.000, 0.050) = 0 
    [0.050, 0.100) = 208 
    [0.100, 0.150) = 66 
    [0.150, 0.200) = 20 
    [0.200, 0.250) = 10 
    [0.250, 0.300) = 6 
    [0.300, 0.350) = 1 
    [0.350, 0.400) = 2 
    [0.400, 0.450) = 2 
    [0.450, 0.500) = 0 
    [0.500, 0.550) = 1 
    [0.550, 0.600) = 0 
    [0.600, 0.650) = 0 
    [0.650, 0.700) = 0 
    [0.700, 0.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =      0.052 ms/op
     p(50.0000) =      0.084 ms/op
     p(90.0000) =      0.178 ms/op
     p(95.0000) =      0.227 ms/op
     p(99.0000) =      0.446 ms/op
     p(99.9000) =      0.773 ms/op
     p(99.9900) =      0.773 ms/op
     p(99.9990) =      0.773 ms/op
     p(99.9999) =      0.773 ms/op
    p(100.0000) =      0.773 ms/op


# JMH version: 1.37
# VM version: JDK 22.0.1, OpenJDK 64-Bit Server VM, 22.0.1
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.1/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.kv.jmh.util.metrics.RunWithListTest.trace

# Run progress: 99.97% complete, ETA 00:00:00
# Fork: 1 of 3
# Warmup Iteration   1: 0.569 ms/op
# Warmup Iteration   2: 0.163 ms/op
Iteration   1: 0.121 ms/op
Iteration   2: 0.129 ms/op
Iteration   3: 0.131 ms/op

# Run progress: 99.98% complete, ETA 00:00:00
# Fork: 2 of 3
# Warmup Iteration   1: 0.521 ms/op
# Warmup Iteration   2: 0.147 ms/op
Iteration   1: 0.111 ms/op
Iteration   2: 0.119 ms/op
Iteration   3: 0.118 ms/op

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 3 of 3
# Warmup Iteration   1: 0.656 ms/op
# Warmup Iteration   2: 0.185 ms/op
Iteration   1: 0.141 ms/op
Iteration   2: 0.109 ms/op
Iteration   3: 0.125 ms/op


Result "com.kv.jmh.util.metrics.RunWithListTest.trace":
  N = 9
  mean =      0.123 ±(99.9%) 0.017 ms/op

  Histogram, ms/op:
    [0.100, 0.103) = 0 
    [0.103, 0.105) = 0 
    [0.105, 0.108) = 0 
    [0.108, 0.110) = 1 
    [0.110, 0.113) = 1 
    [0.113, 0.115) = 0 
    [0.115, 0.118) = 1 
    [0.118, 0.120) = 1 
    [0.120, 0.123) = 1 
    [0.123, 0.125) = 0 
    [0.125, 0.128) = 1 
    [0.128, 0.130) = 1 
    [0.130, 0.133) = 1 
    [0.133, 0.135) = 0 
    [0.135, 0.138) = 0 
    [0.138, 0.140) = 0 
    [0.140, 0.143) = 1 
    [0.143, 0.145) = 0 
    [0.145, 0.148) = 0 

  Percentiles, ms/op:
      p(0.0000) =      0.109 ms/op
     p(50.0000) =      0.121 ms/op
     p(90.0000) =      0.141 ms/op
     p(95.0000) =      0.141 ms/op
     p(99.0000) =      0.141 ms/op
     p(99.9000) =      0.141 ms/op
     p(99.9900) =      0.141 ms/op
     p(99.9990) =      0.141 ms/op
     p(99.9999) =      0.141 ms/op
    p(100.0000) =      0.141 ms/op


# Run complete. Total time: 00:00:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                        Mode  Cnt   Score   Error   Units
RunWithListTest.trace           thrpt    9  11.526 ± 2.187  ops/ms
RunWithListTest.trace            avgt    9   0.097 ± 0.009   ms/op
RunWithListTest.trace          sample  317   0.108 ± 0.014   ms/op
RunWithListTest.trace:p0.00    sample        0.052           ms/op
RunWithListTest.trace:p0.50    sample        0.084           ms/op
RunWithListTest.trace:p0.90    sample        0.178           ms/op
RunWithListTest.trace:p0.95    sample        0.227           ms/op
RunWithListTest.trace:p0.99    sample        0.446           ms/op
RunWithListTest.trace:p0.999   sample        0.773           ms/op
RunWithListTest.trace:p0.9999  sample        0.773           ms/op
RunWithListTest.trace:p1.00    sample        0.773           ms/op
RunWithListTest.trace              ss    9   0.123 ± 0.017   ms/op
