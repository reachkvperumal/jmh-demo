# JMH version: 1.37
# VM version: JDK 22.0.2, OpenJDK 64-Bit Server VM, 22.0.2+9-70
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.2/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest

# Run progress: 0.00% complete, ETA 00:00:54
# Fork: 1 of 3
# Warmup Iteration   1: 0.054 ops/ms
# Warmup Iteration   2: 0.069 ops/ms
Iteration   1: 0.071 ops/ms
Iteration   2: 0.077 ops/ms
Iteration   3: 0.080 ops/ms

# Run progress: 11.11% complete, ETA 00:01:33
# Fork: 2 of 3
# Warmup Iteration   1: 0.051 ops/ms
# Warmup Iteration   2: 0.070 ops/ms
Iteration   1: 0.055 ops/ms
Iteration   2: 0.070 ops/ms
Iteration   3: 0.045 ops/ms

# Run progress: 22.22% complete, ETA 00:01:24
# Fork: 3 of 3
# Warmup Iteration   1: 0.055 ops/ms
# Warmup Iteration   2: 0.070 ops/ms
Iteration   1: 0.055 ops/ms
Iteration   2: 0.069 ops/ms
Iteration   3: 0.085 ops/ms


Result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest":
  0.067 ±(99.9%) 0.022 ops/ms [Average]
  (min, avg, max) = (0.045, 0.067, 0.085), stdev = 0.013
  CI (99.9%): [0.045, 0.090] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 22.0.2, OpenJDK 64-Bit Server VM, 22.0.2+9-70
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.2/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest

# Run progress: 33.32% complete, ETA 00:01:12
# Fork: 1 of 3
# Warmup Iteration   1: 19.666 ms/op
# Warmup Iteration   2: 14.606 ms/op
Iteration   1: 15.028 ms/op
Iteration   2: 11.941 ms/op
Iteration   3: 14.931 ms/op

# Run progress: 44.43% complete, ETA 00:00:59
# Fork: 2 of 3
# Warmup Iteration   1: 20.245 ms/op
# Warmup Iteration   2: 15.163 ms/op
Iteration   1: 13.546 ms/op
Iteration   2: 13.960 ms/op
Iteration   3: 13.921 ms/op

# Run progress: 55.54% complete, ETA 00:00:47
# Fork: 3 of 3
# Warmup Iteration   1: 17.348 ms/op
# Warmup Iteration   2: 13.402 ms/op
Iteration   1: 14.606 ms/op
Iteration   2: 11.495 ms/op
Iteration   3: 19.129 ms/op


Result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest":
  14.284 ±(99.9%) 3.691 ms/op [Average]
  (min, avg, max) = (11.495, 14.284, 19.129), stdev = 2.197
  CI (99.9%): [10.593, 17.975] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 22.0.2, OpenJDK 64-Bit Server VM, 22.0.2+9-70
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.2/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest

# Run progress: 66.65% complete, ETA 00:00:35
# Fork: 1 of 3
# Warmup Iteration   1: 19.474 ±(99.9%) 11.978 ms/op
# Warmup Iteration   2: 15.478 ±(99.9%) 1.882 ms/op
Iteration   1: 24.248 ms/op
                 p0.00:   24.248 ms/op
                 p0.50:   24.248 ms/op
                 p0.90:   24.248 ms/op
                 p0.95:   24.248 ms/op
                 p0.99:   24.248 ms/op
                 p0.999:  24.248 ms/op
                 p0.9999: 24.248 ms/op
                 p1.00:   24.248 ms/op

Iteration   2: 14.746 ms/op
                 p0.00:   14.746 ms/op
                 p0.50:   14.746 ms/op
                 p0.90:   14.746 ms/op
                 p0.95:   14.746 ms/op
                 p0.99:   14.746 ms/op
                 p0.999:  14.746 ms/op
                 p0.9999: 14.746 ms/op
                 p1.00:   14.746 ms/op

Iteration   3: 12.452 ms/op
                 p0.00:   12.452 ms/op
                 p0.50:   12.452 ms/op
                 p0.90:   12.452 ms/op
                 p0.95:   12.452 ms/op
                 p0.99:   12.452 ms/op
                 p0.999:  12.452 ms/op
                 p0.9999: 12.452 ms/op
                 p1.00:   12.452 ms/op


# Run progress: 77.76% complete, ETA 00:00:23
# Fork: 2 of 3
# Warmup Iteration   1: 19.489 ±(99.9%) 12.238 ms/op
# Warmup Iteration   2: 14.623 ±(99.9%) 0.474 ms/op
Iteration   1: 14.238 ms/op
                 p0.00:   14.238 ms/op
                 p0.50:   14.238 ms/op
                 p0.90:   14.238 ms/op
                 p0.95:   14.238 ms/op
                 p0.99:   14.238 ms/op
                 p0.999:  14.238 ms/op
                 p0.9999: 14.238 ms/op
                 p1.00:   14.238 ms/op

Iteration   2: 15.024 ms/op
                 p0.00:   15.024 ms/op
                 p0.50:   15.024 ms/op
                 p0.90:   15.024 ms/op
                 p0.95:   15.024 ms/op
                 p0.99:   15.024 ms/op
                 p0.999:  15.024 ms/op
                 p0.9999: 15.024 ms/op
                 p1.00:   15.024 ms/op

Iteration   3: 16.155 ms/op
                 p0.00:   16.155 ms/op
                 p0.50:   16.155 ms/op
                 p0.90:   16.155 ms/op
                 p0.95:   16.155 ms/op
                 p0.99:   16.155 ms/op
                 p0.999:  16.155 ms/op
                 p0.9999: 16.155 ms/op
                 p1.00:   16.155 ms/op


# Run progress: 88.86% complete, ETA 00:00:11
# Fork: 3 of 3
# Warmup Iteration   1: 19.582 ±(99.9%) 11.596 ms/op
# Warmup Iteration   2: 15.824 ±(99.9%) 3.819 ms/op
Iteration   1: 21.889 ms/op
                 p0.00:   21.889 ms/op
                 p0.50:   21.889 ms/op
                 p0.90:   21.889 ms/op
                 p0.95:   21.889 ms/op
                 p0.99:   21.889 ms/op
                 p0.999:  21.889 ms/op
                 p0.9999: 21.889 ms/op
                 p1.00:   21.889 ms/op

Iteration   2: 15.679 ms/op
                 p0.00:   15.679 ms/op
                 p0.50:   15.679 ms/op
                 p0.90:   15.679 ms/op
                 p0.95:   15.679 ms/op
                 p0.99:   15.679 ms/op
                 p0.999:  15.679 ms/op
                 p0.9999: 15.679 ms/op
                 p1.00:   15.679 ms/op

Iteration   3: 13.631 ms/op
                 p0.00:   13.631 ms/op
                 p0.50:   13.631 ms/op
                 p0.90:   13.631 ms/op
                 p0.95:   13.631 ms/op
                 p0.99:   13.631 ms/op
                 p0.999:  13.631 ms/op
                 p0.9999: 13.631 ms/op
                 p1.00:   13.631 ms/op



Result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest":
  N = 9
  mean =     16.451 ±(99.9%) 6.638 ms/op

  Histogram, ms/op:
    [10.000, 11.250) = 0 
    [11.250, 12.500) = 1 
    [12.500, 13.750) = 1 
    [13.750, 15.000) = 2 
    [15.000, 16.250) = 3 
    [16.250, 17.500) = 0 
    [17.500, 18.750) = 0 
    [18.750, 20.000) = 0 
    [20.000, 21.250) = 0 
    [21.250, 22.500) = 1 
    [22.500, 23.750) = 0 
    [23.750, 25.000) = 1 
    [25.000, 26.250) = 0 
    [26.250, 27.500) = 0 
    [27.500, 28.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     12.452 ms/op
     p(50.0000) =     15.024 ms/op
     p(90.0000) =     24.248 ms/op
     p(95.0000) =     24.248 ms/op
     p(99.0000) =     24.248 ms/op
     p(99.9000) =     24.248 ms/op
     p(99.9900) =     24.248 ms/op
     p(99.9990) =     24.248 ms/op
     p(99.9999) =     24.248 ms/op
    p(100.0000) =     24.248 ms/op


# JMH version: 1.37
# VM version: JDK 22.0.2, OpenJDK 64-Bit Server VM, 22.0.2+9-70
# VM invoker: /opt/homebrew/Cellar/openjdk/22.0.2/libexec/openjdk.jdk/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 3 s each
# Measurement: 3 iterations, 3 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest

# Run progress: 99.97% complete, ETA 00:00:00
# Fork: 1 of 3
# Warmup Iteration   1: 569.313 ms/op
# Warmup Iteration   2: 22.937 ms/op
Iteration   1: 17.221 ms/op
Iteration   2: 18.426 ms/op
Iteration   3: 14.972 ms/op

# Run progress: 99.98% complete, ETA 00:00:00
# Fork: 2 of 3
# Warmup Iteration   1: 582.919 ms/op
# Warmup Iteration   2: 26.302 ms/op
Iteration   1: 18.168 ms/op
Iteration   2: 18.826 ms/op
Iteration   3: 18.156 ms/op

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 3 of 3
# Warmup Iteration   1: 573.379 ms/op
# Warmup Iteration   2: 29.673 ms/op
Iteration   1: 18.418 ms/op
Iteration   2: 18.924 ms/op
Iteration   3: 20.060 ms/op


Result "com.kv.jmh.service.InfoServiceBenchmarkTest.getGadgetInfoTest":
  N = 9
  mean =     18.130 ±(99.9%) 2.363 ms/op

  Histogram, ms/op:
    [14.000, 14.500) = 0 
    [14.500, 15.000) = 1 
    [15.000, 15.500) = 0 
    [15.500, 16.000) = 0 
    [16.000, 16.500) = 0 
    [16.500, 17.000) = 0 
    [17.000, 17.500) = 1 
    [17.500, 18.000) = 0 
    [18.000, 18.500) = 4 
    [18.500, 19.000) = 2 
    [19.000, 19.500) = 0 
    [19.500, 20.000) = 0 
    [20.000, 20.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     14.972 ms/op
     p(50.0000) =     18.418 ms/op
     p(90.0000) =     20.060 ms/op
     p(95.0000) =     20.060 ms/op
     p(99.0000) =     20.060 ms/op
     p(99.9000) =     20.060 ms/op
     p(99.9900) =     20.060 ms/op
     p(99.9990) =     20.060 ms/op
     p(99.9999) =     20.060 ms/op
    p(100.0000) =     20.060 ms/op


# Run complete. Total time: 00:02:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                             Mode  Cnt   Score   Error   Units
InfoServiceBenchmarkTest.getGadgetInfoTest           thrpt    9   0.067 ± 0.022  ops/ms
InfoServiceBenchmarkTest.getGadgetInfoTest            avgt    9  14.284 ± 3.691   ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest          sample    9  16.451 ± 6.638   ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.00    sample       12.452           ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.50    sample       15.024           ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.90    sample       24.248           ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.95    sample       24.248           ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.99    sample       24.248           ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.999   sample       24.248           ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p0.9999  sample       24.248           ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest:p1.00    sample       24.248           ms/op
InfoServiceBenchmarkTest.getGadgetInfoTest              ss    9  18.130 ± 2.363   ms/op
